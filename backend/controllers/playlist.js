// In controllers/playlist.js
const SpotifyWebApi = require('spotify-web-api-node');
const User = require('../models/user');

const spotifyApi = new SpotifyWebApi({
  clientId: process.env.SPOTIFY_CLIENT_ID,
  clientSecret: process.env.SPOTIFY_CLIENT_SECRET,
  redirectUri: process.env.SPOTIFY_REDIRECT_URI
});

// Define genre seeds for different moods
const MOOD_SEEDS = {
  happy: {
    genres: ['pop', 'dance', 'happy'],
    target_valence: 0.7,
    min_valence: 0.5,
    target_energy: 0.8,
    min_energy: 0.6
  },
  sad: {
    genres: ['acoustic', 'piano', 'indie'],
    target_valence: 0.3,
    max_valence: 0.4,
    target_energy: 0.4,
    max_energy: 0.5
  }
};

async function createPlaylist(req, res) {
  try {
    const { mood } = req.body;

    const user = await User.findById(req.user._id);
    if (!user?.spotifyAccessToken) {
      return res.status(401).json({ error: 'No Spotify connection found' });
    }

    spotifyApi.setAccessToken(user.spotifyAccessToken);

    try {
      // Get user profile
      const me = await spotifyApi.getMe();
      console.log('User profile:', me.body);

      // Get available genres
      const availableGenres = await spotifyApi.getAvailableGenreSeeds();
      console.log('Available genres:', availableGenres.body);

      // Set up recommendation parameters using genre seeds
      const moodConfig = MOOD_SEEDS[mood.toLowerCase()] || MOOD_SEEDS.happy;
      
      // Filter genres to ensure they exist in Spotify's available genres
      const validGenres = moodConfig.genres.filter(genre => 
        availableGenres.body.genres.includes(genre)
      );

      // If no valid genres, use some safe defaults
      if (!validGenres.length) {
        validGenres.push('pop');
      }

      const recommendParams = {
        seed_genres: validGenres.slice(0, 2), // Maximum 2 genre seeds
        limit: 30,
        ...moodConfig // Add the mood-specific parameters
      };

      console.log('Getting recommendations with params:', recommendParams);
      
      const recommendations = await spotifyApi.getRecommendations(recommendParams);
      
      if (!recommendations.body.tracks.length) {
        throw new Error('No tracks found for the given mood');
      }

      console.log(`Found ${recommendations.body.tracks.length} recommended tracks`);

      // Create the playlist
      const playlist = await spotifyApi.createPlaylist(me.body.id, {
        name: `${mood} Mix - ${new Date().toLocaleDateString()}`,
        description: `Generated by Music Dashboard based on ${mood} mood`,
        public: false
      });

      console.log('Created playlist:', playlist.body);

      // Add tracks to the playlist
      const trackUris = recommendations.body.tracks.map(track => track.uri);
      await spotifyApi.addTracksToPlaylist(playlist.body.id, trackUris);

      console.log('Added tracks to playlist');

      return res.json({
        id: playlist.body.id,
        name: playlist.body.name,
        url: playlist.body.external_urls.spotify
      });

    } catch (spotifyError) {
      console.error('Spotify API Error:', spotifyError);
      
      if (spotifyError.statusCode === 401) {
        // Token expired
        await User.findByIdAndUpdate(user._id, {
          spotifyAccessToken: null,
          spotifyRefreshToken: null,
          spotifyTokenExpiry: null
        });
        return res.status(401).json({ 
          error: 'Please reconnect your Spotify account',
          reconnectRequired: true 
        });
      }

      throw new Error(spotifyError.message || 'Failed to interact with Spotify API');
    }
  } catch (error) {
    console.error('Playlist creation error:', error);
    return res.status(500).json({ 
      error: error.message || 'Failed to create playlist'
    });
  }
}

module.exports = { createPlaylist };